trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'trgos'
  # Function app name
  functionAppName: 'trgos-authentication'
  # Agent VM image name
  vmBuildImageName: 'vs2017-win2016'
  vmRunTimeImageName: 'vs2017-win2016'
  # Working Directory
  workingDirectory: '**'
  # Artifact File Path
  artifactFile: '$(functionAppName)-$(Build.BuildId).zip'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmBuildImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactFile)'
        replaceExistingArchive: true

    # Function App Supported deployment models: https://docs.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies
    - publish: '$(Build.ArtifactStagingDirectory)/$(artifactFile)'
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmRunTimeImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionApp'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(artifactFile)'
              deploymentMethod: 'auto'